eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICAgICAtIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBkd2FsZXIvIHx8IGVjaG8gInRydWUiID4gZHdhbGVyX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0ga29lbnNjaG1lZXRzLyB8fCBlY2hvICJ0cnVlIiA-IGtvZW5zY2htZWV0c19jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGxla3Rvci8gfHwgZWNobyAidHJ1ZSIgPiBsZWt0b3JfY2hhbmdlZAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBodHRwcy1wb3J0YWwvIHx8IGVjaG8gInRydWUiID4gaHR0cHMtcG9ydGFsX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gc2Z0cC1jYWNoZS8gfHwgZWNobyAidHJ1ZSIgPiBzZnRwLWNhY2hlX2NoYW5nZWQKICBvc3g6CiAgICBpbWFnZTogaWFka25ldC9zc2gtY2xpZW50LWxpZ2h0CiAgICB2b2x1bWVzOgogICAgICAtIC92YWdyYW50X2tleTovdmFncmFudF9rZXkKICAgIGNvbW1hbmRzOgogICAgICAtIHNzaCB2YWdyYW50QDE5Mi4xNjguMzMuMTAgLXAgMjIgLW8gQ29tcHJlc3Npb249eWVzIC1vIERTQUF1dGhlbnRpY2F0aW9uPXllcyAtbyBMb2dMZXZlbD1GQVRBTCAtbyBTdHJpY3RIb3N0S2V5Q2hlY2tpbmc9bm8gLW8gVXNlcktub3duSG9zdHNGaWxlPS9kZXYvbnVsbCAtbyBJZGVudGl0aWVzT25seT15ZXMgLWkgL3ZhZ3JhbnRfa2V5CiAgbG9hZC1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBkd2FsZXIvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQojIERXQUxFUgogIHRlc3QtZHdhbGVyOgogICAgaW1hZ2U6IG5vZGU6NgogICAgZW52aXJvbm1lbnQ6CiAgICAgIE5QTV9DT05GSUdfTE9HTEVWRUw6ICJ3YXJuIgogICAgICBOUE1fQ09ORklHX0NPTE9SOiAiYWx3YXlzIgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGR3YWxlcl9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIGR3YWxlcgogICAgICAtIG5wbSBpbnN0YWxsIC0tcHJvZHVjdGlvbgogICAgICAtIG5wbSB0ZXN0CiAgcHVibGlzaC1kd2FsZXI6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgZHdhbGVyX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL2R3YWxlciAtZiBkd2FsZXIvRG9ja2VyZmlsZSBkd2FsZXIKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4vZHdhbGVyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKIyBMRUtUT1IKICBwdWJsaXNoLWxla3RvcjoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBsZWt0b3JfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vbGVrdG9yIC1mIGxla3Rvci9Eb2NrZXJmaWxlIGxla3RvcgogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9sZWt0b3IKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawojIEtPRU5TQ0hNRUVUUwogIGJ1aWxkLWtvZW5zY2htZWV0czoKICAgIGltYWdlOiB2ZXNwYWtvZW4vbGVrdG9yOmxhdGVzdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIC9kcm9uZS9zcmMvZ2l0aHViLmNvbS92ZXNwYWtvZW4vb250aGV3ZWIva29lbnNjaG1lZXRzCiAgICAgIC0gbGVrdG9yIGJ1aWxkIC1PIHB1YmxpYwogIHB1Ymxpc2gta29lbnNjaG1lZXRzOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRvY2tlciBsb2dpbiAtdSAiJERPQ0tFUl9VU0VSTkFNRSIgLXAgIiRET0NLRVJfUEFTU1dPUkQiCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHZlc3Bha29lbi9rb2Vuc2NobWVldHMgLWYga29lbnNjaG1lZXRzL0RvY2tlcmZpbGUga29lbnNjaG1lZXRzCiAgICAgIC0gZG9ja2VyIHB1c2ggdmVzcGFrb2VuL2tvZW5zY2htZWV0cwogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiMgSFRUUFMtUE9SVEFMCiAgcHVibGlzaC1odHRwcy1wb3J0YWw6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgaHR0cHMtcG9ydGFsX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL2h0dHBzLXBvcnRhbCAtZiBodHRwcy1wb3J0YWwvRG9ja2VyZmlsZSBodHRwcy1wb3J0YWwKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4vaHR0cHMtcG9ydGFsCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICBwdWJsaXNoLXNmdHAtY2FjaGU6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgc2Z0cC1jYWNoZV9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRvY2tlciBsb2dpbiAtdSAiJERPQ0tFUl9VU0VSTkFNRSIgLXAgIiRET0NLRVJfUEFTU1dPUkQiCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHZlc3Bha29lbi9zZnRwLWNhY2hlIC1mIHNmdHAtY2FjaGUvRG9ja2VyZmlsZSBzZnRwLWNhY2hlCiAgICAgIC0gZG9ja2VyIHB1c2ggdmVzcGFrb2VuL3NmdHAtY2FjaGUKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawojIERFUExPWSAobm93IGhhbmRsZWQgYnkgZG9ja2VyIGNsb3VkLCBsZWZ0IGhlcmUgYXMgcmVmZXJlbmNlIGZvciBvdGhlcnMpCiAgIyB1cGRhdGUtc2VydmVyOgogICMgICBpbWFnZTogZGR1cG9ydGFsL2RvY2tlci1jb21wb3NlCiAgIyAgIHZvbHVtZXM6CiAgIyAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogICMgICBjb21tYW5kczoKICAjICAgICAtIGNkIC9kcm9uZS9zcmMvZ2l0aHViLmNvbS92ZXNwYWtvZW4vb250aGV3ZWIKICAjICAgICAtIGJhc2ggLWMgIihjYXQgZHdhbGVyX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2UgcHVsbCBkd2FsZXJ3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHB1bGwga29lbnNjaG1lZXRzd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBkd2FsZXJfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBzdG9wIGR3YWxlcnd3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2Ugc3RvcCBrb2Vuc2NobWVldHN3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGR3YWxlcl9jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHJtIC1mIGR3YWxlcnd3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2Ugcm0gLWYga29lbnNjaG1lZXRzd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBkd2FsZXJfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSB1cCAtZCBkd2FsZXJ3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHVwIC1kIGtvZW5zY2htZWV0c3d3dykgfHwgdHJ1ZSIKICBzYXZlLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGR3YWxlci9ub2RlX21vZHVsZXMKICAgIHJlYnVpbGQ6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1c2ggXQogIG5vdGlmeToKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrOmxhdGVzdAogICAgY2hhbm5lbDogZ2VuZXJhbAogICAgd2hlbjoKICAgICAgc3RhdHVzOiAgWyBmYWlsdXJlLCBzdWNjZXNzIF0K.Qvo2p8IzVrvbBi8siULmgtoN-KdJkwFPa8R0nPN_5Uk