eyJhbGciOiJIUzI1NiJ9.pipeline:
  check-diffs:
    image: bravissimolabs/alpine-git
    commands:
      - cd /drone/src/github.com/vespakoen/ontheweb
      - git diff --name-only ${DRONE_PREV_COMMIT_SHA}..@
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- dwaler/ || echo "true" > dwaler_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- koenschmeets/ || echo "true" > koenschmeets_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- lektor/ || echo "true" > lektor_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- https-portal/ || echo "true" > https-portal_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- sftp-cache/ || echo "true" > sftp-cache_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- ssh-rsync/ || echo "true" > ssh-rsync_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- tiles/ || echo "true" > tiles_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- overpass-api/ || echo "true" > overpass-api_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- brouter-proxy/ || echo "true" > brouter-proxy_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- hummingguru/apps/mobile/ || echo "true" > hummingguru-mobile-app_changed
      - git diff --exit-code --name-only ${DRONE_PREV_COMMIT_SHA}..@ -- motepair || echo "true" > motepair_changed
  ssh-rsync:
    image: docker
    commands:
      - cat ssh-rsync_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/ssh-rsync -f ssh-rsync/Dockerfile ssh-rsync
      - docker push vespakoen/ssh-rsync
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  hummingguru-mobile-app:
    image: vespakoen/ssh-rsync
    volumes:
      - /root/.vagrant.d/insecure_private_key:/vagrant_key
    commands:
      - hummingguru-mobile-app_changed || exit 0
      - export SSH_COMMAND="ssh -o Compression=yes -o DSAAuthentication=yes -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o IdentitiesOnly=yes -i /vagrant_key"
      - rsync -q -avr --delete --exclude "./node_modules" -e "$SSH_COMMAND" hummingguru/apps/mobile/ vagrant@192.168.33.10:/Users/vagrant/hummingguru
      - eval $SSH_COMMAND vagrant@192.168.33.10 /Users/vagrant/hummingguru/ci.sh
  load-cache:
    image: plugins/sftp-cache:latest
    mount:
      - dwaler/node_modules
    restore: true
    when:
      event: [ pull_request, push ]
# DWALER
  test-dwaler:
    image: node:6
    environment:
      NPM_CONFIG_LOGLEVEL: "warn"
      NPM_CONFIG_COLOR: "always"
    commands:
      - cat dwaler_changed || exit 0
      - cd dwaler
      - npm install --production
      - npm test
  publish-dwaler:
    image: docker
    commands:
      - cat dwaler_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/dwaler -f dwaler/Dockerfile dwaler
      - docker push vespakoen/dwaler
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# LEKTOR
  publish-lektor:
    image: docker
    commands:
      - cat lektor_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/lektor -f lektor/Dockerfile lektor
      - docker push vespakoen/lektor
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# KOENSCHMEETS
  build-koenschmeets:
    image: vespakoen/lektor:latest
    commands:
      - cat koenschmeets_changed || exit 0
      - cd /drone/src/github.com/vespakoen/ontheweb/koenschmeets
      - lektor build -O public
  publish-koenschmeets:
    image: docker
    commands:
      - cat koenschmeets_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/koenschmeets -f koenschmeets/Dockerfile koenschmeets
      - docker push vespakoen/koenschmeets
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# HTTPS-PORTAL
  publish-https-portal:
    image: docker
    commands:
      - cat https-portal_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/https-portal -f https-portal/Dockerfile https-portal
      - docker push vespakoen/https-portal
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# VECTOR TILES
  publish-sftp-cache:
    image: docker
    commands:
      - cat sftp-cache_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/sftp-cache -f sftp-cache/Dockerfile sftp-cache
      - docker push vespakoen/sftp-cache
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  publish-tiles:
    image: docker
    commands:
      - cat tiles_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/tiles -f tiles/Dockerfile tiles
      - docker push vespakoen/tiles
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# OVERPASS-API
  publish-overpass-api:
    image: docker
    commands:
      - cat overpass-api_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/overpass-api -f overpass-api/Dockerfile overpass-api
      - docker push vespakoen/overpass-api
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# BROUTER
  publish-brouter-proxy:
    image: docker
    commands:
      - cat brouter-proxy_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/brouter-proxy -f brouter-proxy/Dockerfile brouter-proxy
      - docker push vespakoen/brouter-proxy
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# MOTEPAIR
  publish-motepair:
    image: docker
    commands:
      - cat motepair_changed || exit 0
      - docker login -u "$DOCKER_USERNAME" -p "$DOCKER_PASSWORD"
      - docker build -t vespakoen/motepair -f motepair/Dockerfile motepair
      - docker push vespakoen/motepair
    environment:
      - DOCKER_USERNAME=$$DOCKER_USERNAME
      - DOCKER_PASSWORD=$$DOCKER_PASSWORD
      - DOCKER_EMAIL=$$DOCKER_EMAIL
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
# DEPLOY (now handled by docker cloud, left here as reference for others)
  update-server:
    image: dduportal/docker-compose
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    commands:
      - cd /drone/src/github.com/vespakoen/ontheweb
      # PULL
      - bash -c "(cat dwaler_changed && docker-compose pull dwalerwww) || true"
      - bash -c "(cat koenschmeets_changed && docker-compose pull koenschmeetswww) || true"
      # STOP
      - bash -c "(cat dwaler_changed && docker-compose stop dwalerwww) || true"
      - bash -c "(cat koenschmeets_changed && docker-compose stop koenschmeetswww) || true"
      # RM
      - bash -c "(cat dwaler_changed && docker-compose rm -f dwalerwww) || true"
      - bash -c "(cat koenschmeets_changed && docker-compose rm -f koenschmeetswww) || true"
      # UP
      - bash -c "(cat dwaler_changed && docker-compose up -d dwalerwww) || true"
      - bash -c "(cat koenschmeets_changed && docker-compose up -d koenschmeetswww) || true"
  save-cache:
    image: plugins/sftp-cache:latest
    mount:
      - dwaler/node_modules
    rebuild: true
    when:
      event: [ push ]
  notify:
    image: plugins/slack:latest
    channel: general
    when:
      status:  [ failure, success ]
.qSJq9JQZkbhGXhYMQ1yTgavzcFzElhSeMJy5itIecFA