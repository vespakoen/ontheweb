eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICAgICAtIGdpdCBkaWZmIC0tbmFtZS1vbmx5IEB-Li5ACiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgQH4uLkAgLS0gZHdhbGVyLyB8fCBlY2hvICJ0cnVlIiA-IGR3YWxlcl9jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgQH4uLkAgLS0ga29lbnNjaG1lZXRzLyB8fCBlY2hvICJ0cnVlIiA-IGtvZW5zY2htZWV0c19jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgQH4uLkAgLS0gbGVrdG9yLyB8fCBlY2hvICJ0cnVlIiA-IGxla3Rvcl9jaGFuZ2VkCiAgbG9hZC1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBkd2FsZXIvbm9kZV9tb2R1bGVzCiAgICByZXN0b3JlOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdWxsX3JlcXVlc3QsIHB1c2ggXQogIHRlc3QtZHdhbGVyOgogICAgaW1hZ2U6IG5vZGU6NgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGR3YWxlcl9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGNkIGR3YWxlcgogICAgICAtIG5wbSBpbnN0YWxsCiAgICAgIC0gbnBtIHRlc3QKICBwdWJsaXNoLWR3YWxlcjoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBkd2FsZXJfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgcHMKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vZHdhbGVyIC1mIGR3YWxlci9Eb2NrZXJmaWxlIGR3YWxlcgogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9kd2FsZXIKICAgICAgLSBkb2NrZXIgcmVzdGFydCBgZG9ja2VyIHBzIHwgZ3JlcCBkd2FsZXJ3d3cgfCBjdXQgLWQnICcgLWYxYAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgcHVibGlzaC1sZWt0b3I6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgbGVrdG9yX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIHBzCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL2xla3RvciAtZiBsZWt0b3IvRG9ja2VyZmlsZSBsZWt0b3IKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4vbGVrdG9yCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICBidWlsZC1rb2Vuc2NobWVldHM6CiAgICBpbWFnZTogdmVzcGFrb2VuL2xla3RvcjpsYXRlc3QKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCAvZHJvbmUvc3JjL2dpdGh1Yi5jb20vdmVzcGFrb2VuL29udGhld2ViL2tvZW5zY2htZWV0cwogICAgICAtIGxla3RvciBidWlsZCAtTyBwdWJsaWMKICBwdWJsaXNoLWtvZW5zY2htZWV0czoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgcHMKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4va29lbnNjaG1lZXRzIC1mIGtvZW5zY2htZWV0cy9Eb2NrZXJmaWxlIGtvZW5zY2htZWV0cwogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9rb2Vuc2NobWVldHMKICAgICAgLSBkb2NrZXIgcmVzdGFydCBgZG9ja2VyIHBzIHwgZ3JlcCBrb2Vuc2NobWVldHN3d3cgfCBjdXQgLWQnICcgLWYxYAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgc2F2ZS1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBkd2FsZXIvbm9kZV9tb2R1bGVzCiAgICByZWJ1aWxkOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0K.zgFVSO42RkUBqRMiWK6Z34NmjsqlIq8b9OBpRQjyjQQ