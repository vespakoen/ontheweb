eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICAgICAtIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBkd2FsZXIvIHx8IGVjaG8gInRydWUiID4gZHdhbGVyX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0ga29lbnNjaG1lZXRzLyB8fCBlY2hvICJ0cnVlIiA-IGtvZW5zY2htZWV0c19jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGxla3Rvci8gfHwgZWNobyAidHJ1ZSIgPiBsZWt0b3JfY2hhbmdlZAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBodHRwcy1wb3J0YWwvIHx8IGVjaG8gInRydWUiID4gaHR0cHMtcG9ydGFsX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gc2Z0cC1jYWNoZS8gfHwgZWNobyAidHJ1ZSIgPiBzZnRwLWNhY2hlX2NoYW5nZWQKICBvc3g6CiAgICBpbWFnZTogaWFka25ldC9zc2gtY2xpZW50LWxpZ2h0CiAgICB2b2x1bWVzOgogICAgICAtIC9yb290Ly52YWdyYW50LmQvaW5zZWN1cmVfcHJpdmF0ZV9rZXk6L3ZhZ3JhbnRfa2V5CiAgICBjb21tYW5kczoKICAgICAgLSBzc2ggdmFncmFudEAxOTIuMTY4LjMzLjEwIC1wIDIyIC1vIENvbXByZXNzaW9uPXllcyAtbyBEU0FBdXRoZW50aWNhdGlvbj15ZXMgLW8gTG9nTGV2ZWw9RkFUQUwgLW8gU3RyaWN0SG9zdEtleUNoZWNraW5nPW5vIC1vIFVzZXJLbm93bkhvc3RzRmlsZT0vZGV2L251bGwgLW8gSWRlbnRpdGllc09ubHk9eWVzIC1pIC92YWdyYW50X2tleSB4Y29kZWJ1aWxkIC0taGVscAogIGxvYWQtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gZHdhbGVyL25vZGVfbW9kdWxlcwogICAgcmVzdG9yZTogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVsbF9yZXF1ZXN0LCBwdXNoIF0KIyBEV0FMRVIKICB0ZXN0LWR3YWxlcjoKICAgIGltYWdlOiBub2RlOjYKICAgIGVudmlyb25tZW50OgogICAgICBOUE1fQ09ORklHX0xPR0xFVkVMOiAid2FybiIKICAgICAgTlBNX0NPTkZJR19DT0xPUjogImFsd2F5cyIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBkd2FsZXJfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCBkd2FsZXIKICAgICAgLSBucG0gaW5zdGFsbCAtLXByb2R1Y3Rpb24KICAgICAgLSBucG0gdGVzdAogIHB1Ymxpc2gtZHdhbGVyOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGR3YWxlcl9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRvY2tlciBsb2dpbiAtdSAiJERPQ0tFUl9VU0VSTkFNRSIgLXAgIiRET0NLRVJfUEFTU1dPUkQiCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHZlc3Bha29lbi9kd2FsZXIgLWYgZHdhbGVyL0RvY2tlcmZpbGUgZHdhbGVyCiAgICAgIC0gZG9ja2VyIHB1c2ggdmVzcGFrb2VuL2R3YWxlcgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiMgTEVLVE9SCiAgcHVibGlzaC1sZWt0b3I6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgbGVrdG9yX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL2xla3RvciAtZiBsZWt0b3IvRG9ja2VyZmlsZSBsZWt0b3IKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4vbGVrdG9yCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKIyBLT0VOU0NITUVFVFMKICBidWlsZC1rb2Vuc2NobWVldHM6CiAgICBpbWFnZTogdmVzcGFrb2VuL2xla3RvcjpsYXRlc3QKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBjZCAvZHJvbmUvc3JjL2dpdGh1Yi5jb20vdmVzcGFrb2VuL29udGhld2ViL2tvZW5zY2htZWV0cwogICAgICAtIGxla3RvciBidWlsZCAtTyBwdWJsaWMKICBwdWJsaXNoLWtvZW5zY2htZWV0czoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4va29lbnNjaG1lZXRzIC1mIGtvZW5zY2htZWV0cy9Eb2NrZXJmaWxlIGtvZW5zY2htZWV0cwogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9rb2Vuc2NobWVldHMKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawojIEhUVFBTLVBPUlRBTAogIHB1Ymxpc2gtaHR0cHMtcG9ydGFsOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGh0dHBzLXBvcnRhbF9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRvY2tlciBsb2dpbiAtdSAiJERPQ0tFUl9VU0VSTkFNRSIgLXAgIiRET0NLRVJfUEFTU1dPUkQiCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHZlc3Bha29lbi9odHRwcy1wb3J0YWwgLWYgaHR0cHMtcG9ydGFsL0RvY2tlcmZpbGUgaHR0cHMtcG9ydGFsCiAgICAgIC0gZG9ja2VyIHB1c2ggdmVzcGFrb2VuL2h0dHBzLXBvcnRhbAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgcHVibGlzaC1zZnRwLWNhY2hlOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IHNmdHAtY2FjaGVfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vc2Z0cC1jYWNoZSAtZiBzZnRwLWNhY2hlL0RvY2tlcmZpbGUgc2Z0cC1jYWNoZQogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9zZnRwLWNhY2hlCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKIyBERVBMT1kgKG5vdyBoYW5kbGVkIGJ5IGRvY2tlciBjbG91ZCwgbGVmdCBoZXJlIGFzIHJlZmVyZW5jZSBmb3Igb3RoZXJzKQogICMgdXBkYXRlLXNlcnZlcjoKICAjICAgaW1hZ2U6IGRkdXBvcnRhbC9kb2NrZXItY29tcG9zZQogICMgICB2b2x1bWVzOgogICMgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKICAjICAgY29tbWFuZHM6CiAgIyAgICAgLSBjZCAvZHJvbmUvc3JjL2dpdGh1Yi5jb20vdmVzcGFrb2VuL29udGhld2ViCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGR3YWxlcl9jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHB1bGwgZHdhbGVyd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBwdWxsIGtvZW5zY2htZWV0c3d3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQgZHdhbGVyX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2Ugc3RvcCBkd2FsZXJ3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHN0b3Aga29lbnNjaG1lZXRzd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBkd2FsZXJfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBybSAtZiBkd2FsZXJ3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGtvZW5zY2htZWV0c19jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHJtIC1mIGtvZW5zY2htZWV0c3d3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQgZHdhbGVyX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2UgdXAgLWQgZHdhbGVyd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSB1cCAtZCBrb2Vuc2NobWVldHN3d3cpIHx8IHRydWUiCiAgc2F2ZS1jYWNoZToKICAgIGltYWdlOiBwbHVnaW5zL3NmdHAtY2FjaGU6bGF0ZXN0CiAgICBtb3VudDoKICAgICAgLSBkd2FsZXIvbm9kZV9tb2R1bGVzCiAgICByZWJ1aWxkOiB0cnVlCiAgICB3aGVuOgogICAgICBldmVudDogWyBwdXNoIF0KICBub3RpZnk6CiAgICBpbWFnZTogcGx1Z2lucy9zbGFjazpsYXRlc3QKICAgIGNoYW5uZWw6IGdlbmVyYWwKICAgIHdoZW46CiAgICAgIHN0YXR1czogIFsgZmFpbHVyZSwgc3VjY2VzcyBdCg.4KmOfsmi11_qdAVRt3rdTGev92P-XEZD6vdt80jHS04