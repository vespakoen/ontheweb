eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgY2hlY2stZGlmZnM6CiAgICBpbWFnZTogYnJhdmlzc2ltb2xhYnMvYWxwaW5lLWdpdAogICAgY29tbWFuZHM6CiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICAgICAtIGdpdCBkaWZmIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBkd2FsZXIvIHx8IGVjaG8gInRydWUiID4gZHdhbGVyX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0ga29lbnNjaG1lZXRzLyB8fCBlY2hvICJ0cnVlIiA-IGtvZW5zY2htZWV0c19jaGFuZ2VkCiAgICAgIC0gZ2l0IGRpZmYgLS1leGl0LWNvZGUgLS1uYW1lLW9ubHkgJHtEUk9ORV9QUkVWX0NPTU1JVF9TSEF9Li5AIC0tIGxla3Rvci8gfHwgZWNobyAidHJ1ZSIgPiBsZWt0b3JfY2hhbmdlZAogICAgICAtIGdpdCBkaWZmIC0tZXhpdC1jb2RlIC0tbmFtZS1vbmx5ICR7RFJPTkVfUFJFVl9DT01NSVRfU0hBfS4uQCAtLSBodHRwcy1wb3J0YWwvIHx8IGVjaG8gInRydWUiID4gaHR0cHMtcG9ydGFsX2NoYW5nZWQKICAgICAgLSBnaXQgZGlmZiAtLWV4aXQtY29kZSAtLW5hbWUtb25seSAke0RST05FX1BSRVZfQ09NTUlUX1NIQX0uLkAgLS0gc2Z0cC1jYWNoZS8gfHwgZWNobyAidHJ1ZSIgPiBzZnRwLWNhY2hlX2NoYW5nZWQKICBzc2gtcnN5bmM6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vc3NoLXJzeW5jIC1mIHNzaC1yc3luYy9Eb2NrZXJmaWxlIHNzaC1yc3luYwogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9zc2gtcnN5bmMKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogIG9zeDoKICAgIGltYWdlOiB2ZXNwYWtvZW4vc3NoLXJzeW5jCiAgICB2b2x1bWVzOgogICAgICAtIC9yb290Ly52YWdyYW50LmQvaW5zZWN1cmVfcHJpdmF0ZV9rZXk6L3ZhZ3JhbnRfa2V5CiAgICBjb21tYW5kczoKICAgICAgLSBleHBvcnQgU1NIX0NPTU1BTkQ9InNzaCB2YWdyYW50QDE5Mi4xNjguMzMuMTAgLXAgMjIgLW8gQ29tcHJlc3Npb249eWVzIC1vIERTQUF1dGhlbnRpY2F0aW9uPXllcyAtbyBMb2dMZXZlbD1GQVRBTCAtbyBTdHJpY3RIb3N0S2V5Q2hlY2tpbmc9bm8gLW8gVXNlcktub3duSG9zdHNGaWxlPS9kZXYvbnVsbCAtbyBJZGVudGl0aWVzT25seT15ZXMgLWkgL3ZhZ3JhbnRfa2V5IgogICAgICAtIHNjcCAtaSAvdmFncmFudF9rZXkgLXIgaHVtbWluZ2d1cnUvYXBwcy9tb2JpbGUvIHZhZ3JhbnRAMTkyLjE2OC4zMy4xMDovaHVtbWluZ2d1cnUKICAgICAgLSBldmFsICRTU0hfQ09NTUFORCAvaHVtbWluZ2d1cnUvY2kuc2gKICBsb2FkLWNhY2hlOgogICAgaW1hZ2U6IHBsdWdpbnMvc2Z0cC1jYWNoZTpsYXRlc3QKICAgIG1vdW50OgogICAgICAtIGR3YWxlci9ub2RlX21vZHVsZXMKICAgIHJlc3RvcmU6IHRydWUKICAgIHdoZW46CiAgICAgIGV2ZW50OiBbIHB1bGxfcmVxdWVzdCwgcHVzaCBdCiMgRFdBTEVSCiAgdGVzdC1kd2FsZXI6CiAgICBpbWFnZTogbm9kZTo2CiAgICBlbnZpcm9ubWVudDoKICAgICAgTlBNX0NPTkZJR19MT0dMRVZFTDogIndhcm4iCiAgICAgIE5QTV9DT05GSUdfQ09MT1I6ICJhbHdheXMiCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQgZHdhbGVyX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gY2QgZHdhbGVyCiAgICAgIC0gbnBtIGluc3RhbGwgLS1wcm9kdWN0aW9uCiAgICAgIC0gbnBtIHRlc3QKICBwdWJsaXNoLWR3YWxlcjoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBkd2FsZXJfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vZHdhbGVyIC1mIGR3YWxlci9Eb2NrZXJmaWxlIGR3YWxlcgogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9kd2FsZXIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawojIExFS1RPUgogIHB1Ymxpc2gtbGVrdG9yOgogICAgaW1hZ2U6IGRvY2tlcgogICAgY29tbWFuZHM6CiAgICAgIC0gY2F0IGxla3Rvcl9jaGFuZ2VkIHx8IGV4aXQgMAogICAgICAtIGRvY2tlciBsb2dpbiAtdSAiJERPQ0tFUl9VU0VSTkFNRSIgLXAgIiRET0NLRVJfUEFTU1dPUkQiCiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IHZlc3Bha29lbi9sZWt0b3IgLWYgbGVrdG9yL0RvY2tlcmZpbGUgbGVrdG9yCiAgICAgIC0gZG9ja2VyIHB1c2ggdmVzcGFrb2VuL2xla3RvcgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiMgS09FTlNDSE1FRVRTCiAgYnVpbGQta29lbnNjaG1lZXRzOgogICAgaW1hZ2U6IHZlc3Bha29lbi9sZWt0b3I6bGF0ZXN0CiAgICBjb21tYW5kczoKICAgICAgLSBjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYi9rb2Vuc2NobWVldHMKICAgICAgLSBsZWt0b3IgYnVpbGQgLU8gcHVibGljCiAgcHVibGlzaC1rb2Vuc2NobWVldHM6CiAgICBpbWFnZTogZG9ja2VyCiAgICBjb21tYW5kczoKICAgICAgLSBjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL2tvZW5zY2htZWV0cyAtZiBrb2Vuc2NobWVldHMvRG9ja2VyZmlsZSBrb2Vuc2NobWVldHMKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4va29lbnNjaG1lZXRzCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfVVNFUk5BTUU9JCRET0NLRVJfVVNFUk5BTUUKICAgICAgLSBET0NLRVJfUEFTU1dPUkQ9JCRET0NLRVJfUEFTU1dPUkQKICAgICAgLSBET0NLRVJfRU1BSUw9JCRET0NLRVJfRU1BSUwKICAgIHZvbHVtZXM6CiAgICAgIC0gL3Zhci9ydW4vZG9ja2VyLnNvY2s6L3Zhci9ydW4vZG9ja2VyLnNvY2sKIyBIVFRQUy1QT1JUQUwKICBwdWJsaXNoLWh0dHBzLXBvcnRhbDoKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBodHRwcy1wb3J0YWxfY2hhbmdlZCB8fCBleGl0IDAKICAgICAgLSBkb2NrZXIgbG9naW4gLXUgIiRET0NLRVJfVVNFUk5BTUUiIC1wICIkRE9DS0VSX1BBU1NXT1JEIgogICAgICAtIGRvY2tlciBidWlsZCAtdCB2ZXNwYWtvZW4vaHR0cHMtcG9ydGFsIC1mIGh0dHBzLXBvcnRhbC9Eb2NrZXJmaWxlIGh0dHBzLXBvcnRhbAogICAgICAtIGRvY2tlciBwdXNoIHZlc3Bha29lbi9odHRwcy1wb3J0YWwKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9VU0VSTkFNRT0kJERPQ0tFUl9VU0VSTkFNRQogICAgICAtIERPQ0tFUl9QQVNTV09SRD0kJERPQ0tFUl9QQVNTV09SRAogICAgICAtIERPQ0tFUl9FTUFJTD0kJERPQ0tFUl9FTUFJTAogICAgdm9sdW1lczoKICAgICAgLSAvdmFyL3J1bi9kb2NrZXIuc29jazovdmFyL3J1bi9kb2NrZXIuc29jawogIHB1Ymxpc2gtc2Z0cC1jYWNoZToKICAgIGltYWdlOiBkb2NrZXIKICAgIGNvbW1hbmRzOgogICAgICAtIGNhdCBzZnRwLWNhY2hlX2NoYW5nZWQgfHwgZXhpdCAwCiAgICAgIC0gZG9ja2VyIGxvZ2luIC11ICIkRE9DS0VSX1VTRVJOQU1FIiAtcCAiJERPQ0tFUl9QQVNTV09SRCIKICAgICAgLSBkb2NrZXIgYnVpbGQgLXQgdmVzcGFrb2VuL3NmdHAtY2FjaGUgLWYgc2Z0cC1jYWNoZS9Eb2NrZXJmaWxlIHNmdHAtY2FjaGUKICAgICAgLSBkb2NrZXIgcHVzaCB2ZXNwYWtvZW4vc2Z0cC1jYWNoZQogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX1VTRVJOQU1FPSQkRE9DS0VSX1VTRVJOQU1FCiAgICAgIC0gRE9DS0VSX1BBU1NXT1JEPSQkRE9DS0VSX1BBU1NXT1JECiAgICAgIC0gRE9DS0VSX0VNQUlMPSQkRE9DS0VSX0VNQUlMCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiMgREVQTE9ZIChub3cgaGFuZGxlZCBieSBkb2NrZXIgY2xvdWQsIGxlZnQgaGVyZSBhcyByZWZlcmVuY2UgZm9yIG90aGVycykKICAjIHVwZGF0ZS1zZXJ2ZXI6CiAgIyAgIGltYWdlOiBkZHVwb3J0YWwvZG9ja2VyLWNvbXBvc2UKICAjICAgdm9sdW1lczoKICAjICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgIyAgIGNvbW1hbmRzOgogICMgICAgIC0gY2QgL2Ryb25lL3NyYy9naXRodWIuY29tL3Zlc3Bha29lbi9vbnRoZXdlYgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBkd2FsZXJfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBwdWxsIGR3YWxlcnd3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2UgcHVsbCBrb2Vuc2NobWVldHN3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGR3YWxlcl9jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHN0b3AgZHdhbGVyd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBzdG9wIGtvZW5zY2htZWV0c3d3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQgZHdhbGVyX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2Ugcm0gLWYgZHdhbGVyd3d3KSB8fCB0cnVlIgogICMgICAgIC0gYmFzaCAtYyAiKGNhdCBrb2Vuc2NobWVldHNfY2hhbmdlZCAmJiBkb2NrZXItY29tcG9zZSBybSAtZiBrb2Vuc2NobWVldHN3d3cpIHx8IHRydWUiCiAgIyAgICAgLSBiYXNoIC1jICIoY2F0IGR3YWxlcl9jaGFuZ2VkICYmIGRvY2tlci1jb21wb3NlIHVwIC1kIGR3YWxlcnd3dykgfHwgdHJ1ZSIKICAjICAgICAtIGJhc2ggLWMgIihjYXQga29lbnNjaG1lZXRzX2NoYW5nZWQgJiYgZG9ja2VyLWNvbXBvc2UgdXAgLWQga29lbnNjaG1lZXRzd3d3KSB8fCB0cnVlIgogIHNhdmUtY2FjaGU6CiAgICBpbWFnZTogcGx1Z2lucy9zZnRwLWNhY2hlOmxhdGVzdAogICAgbW91bnQ6CiAgICAgIC0gZHdhbGVyL25vZGVfbW9kdWxlcwogICAgcmVidWlsZDogdHJ1ZQogICAgd2hlbjoKICAgICAgZXZlbnQ6IFsgcHVzaCBdCiAgbm90aWZ5OgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2s6bGF0ZXN0CiAgICBjaGFubmVsOiBnZW5lcmFsCiAgICB3aGVuOgogICAgICBzdGF0dXM6ICBbIGZhaWx1cmUsIHN1Y2Nlc3MgXQo.ZjO4-wtojMici8Ut3L9LSc-hsM9wUE3RS4tiEi1ZMI4